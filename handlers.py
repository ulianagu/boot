from telebot import types
from database import save_walk, get_walks_by_city, get_user_walks, delete_walk
from utils import get_weather_data, generate_outfit_recommendation, get_city_coords, get_place_photo
from config import OPENWEATHER_API,FOURSQUARE_API,OPENTRIPMAP_API
import requests
import sqlite3
from datetime import datetime
from transformers import pipeline
from googletrans import Translator

DB_NAME = 'walks6.db'
classifier = pipeline("text-classification", model="models/unitary-toxic-bert")
translator = Translator()

def register_handlers(bot):

    @bot.message_handler(commands=['start_walk'])
    def start_walk(message):
        msg = bot.send_message(message.chat.id, "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥—É–ª—è—Ç—å?")
        bot.register_next_step_handler(msg, process_city_step)
    
    def process_city_step(message):
        city = message.text.strip()
        msg = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –∫ –ø–æ–ø—É—Ç—á–∏–∫—É:")

        bot.register_next_step_handler(msg, process_text_step, city)

    def process_text_step(message, city):
        user_text = message.text.strip()

        translated_text = translator.translate(user_text, src='ru', dest='en').text
        toxicity_result = classifier(translated_text)[0]
        
        if toxicity_result['label'] == 'toxic' and toxicity_result['score'] > 0.8:
            bot.send_message(
                message.chat.id, 
                "‚ö†Ô∏è –í—ã –ø—Ä–∏–∑–Ω–∞–Ω—ã —Ç–æ–∫—Å–∏–∫–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞"
            )
            return  
        
       
        username = message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"  
        save_walk(message.from_user.id, username, city, user_text)
        bot.send_message(
            message.chat.id, 
            f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n–ì–æ—Ä–æ–¥: {city}\n–í–∞—à —Ç–µ–∫—Å—Ç: {user_text}"
        )




    def save_walk(user_id, username, city, text):
        conn = sqlite3.connect(DB_NAME)
        c = conn.cursor()
        c.execute("INSERT INTO walks (user_id, username, city, text, timestamp) VALUES (?, ?, ?, ?, ?)",
                (user_id, username, city.lower(), text, datetime.now()))
        conn.commit()
        conn.close()

 
    def get_walks_by_city(city):
        conn = sqlite3.connect(DB_NAME)
        c = conn.cursor()
        c.execute("SELECT * FROM walks WHERE city = ? ORDER BY timestamp DESC", (city,))
        result = c.fetchall()
        conn.close()
        return result

    def create_custom_keyboard():
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  
        btn_help = types.KeyboardButton("/help")  
        markup.add(btn_help)  
        return markup

    
    @bot.message_handler(commands=['start'])
    def start_command(message):
        
        welcome_text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—É–ª–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ."
        
        
        bot.send_message(message.chat.id, welcome_text, reply_markup=create_custom_keyboard())

    
    @bot.message_handler(commands=['help'])
    def help_command(message):
       
        help_text = """
    üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:

    /start_walk ‚Äî —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É.
    /show_walks ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏.
    /delete_walk ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∑–∞—è–≤–∫—É.
    /explore <–≥–æ—Ä–æ–¥> ‚Äî –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    /food <–≥–æ—Ä–æ–¥> ‚Äî –Ω–∞–π—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã.
    /outfit <–≥–æ—Ä–æ–¥> ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ.
        """
        
        
        bot.send_message(message.chat.id, help_text, reply_markup=create_custom_keyboard())

    @bot.message_handler(commands=['show_walks'])
    def show_walks(message):
        try:
            
            city = message.text.split(' ', 1)[1].strip().lower()
        except IndexError:
            
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥. –ù–∞–ø—Ä–∏–º–µ—Ä: /show_walks –ú–æ—Å–∫–≤–∞")
            return

        
        process_show_walks(message, city)

    def process_show_walks(message, city):
        walks = get_walks_by_city(city)
        if walks:
            response = [f"üèôÔ∏è <b>{city.capitalize()}</b> - –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n"]
            for walk in walks:
                
                if len(walk) >= 6:
                    username = walk[2]  
                    response.append(
                        f"\nüë§ –ó–∞—è–≤–∫–∞ #{walk[0]}\n"
                        f"üìù {walk[4]}\n"
                        f"üïí {walk[5]}\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
                    )
                else:
                    
                    response.append("\n‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞—è–≤–∫–µ.")
            bot.send_message(message.chat.id, "\n".join(response), parse_mode='HTML')
        else:
            bot.send_message(message.chat.id, f"–í –≥–æ—Ä–æ–¥–µ {city} –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")


    
    @bot.message_handler(commands=['delete_walk'])
    def delete_walk_handler(message):
        user_id = message.from_user.id
        walks = get_user_walks(user_id)
        
        if walks:
            markup = types.InlineKeyboardMarkup()
            for walk in walks:
                
                btn = types.InlineKeyboardButton(f"‚ùå #{walk[0]} - {walk[2]}", callback_data=f"delete_{walk[0]}")
                markup.add(btn)
            
            
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")

    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
    def handle_delete_callback(call):
        
        walk_id = int(call.data.split("_")[1])
        
        
        delete_walk(walk_id)
        
        
        bot.answer_callback_query(call.id, f"–ó–∞—è–≤–∫–∞ #{walk_id} —É–¥–∞–ª–µ–Ω–∞.")
        
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–ó–∞—è–≤–∫–∞ #{walk_id} —É–¥–∞–ª–µ–Ω–∞."
        )

    
    @bot.message_handler(commands=['explore'])
    def handle_explore(message):
        """–ò—â–µ–º –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –≥–æ—Ä–æ–¥–µ."""
        try:
            city = message.text.split(' ', 1)[1]
            coords = get_city_coords(city)
            if not coords:
                return bot.reply_to(message, "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω üßê")
            
            url = f"https://api.opentripmap.com/0.1/ru/places/radius?radius=10000&lon={coords[1]}&lat={coords[0]}&apikey={OPENTRIPMAP_API}&format=json"
            response = requests.get(url).json()
            
            
            if not response:
                return bot.reply_to(message, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòî")
            
            # –¢–æ–ø-5 –º–µ—Å—Ç
            for place in response[:5]:
                name = place.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                desc = place.get('kinds', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
                photo_url = get_place_photo(place.get('xid'))
                
                caption = f"üèõ <b>{name}</b>\n\n{desc}"
                if photo_url:
                    bot.send_photo(message.chat.id, photo_url, caption=caption, parse_mode='HTML')
                else:
                    bot.send_message(message.chat.id, caption, parse_mode='HTML')
                    
        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞: {str(e)}")

    
    @bot.message_handler(commands=['food'])
    def handle_food(message):
        try:
            city = message.text.split(' ', 1)[1]
            headers = {
                "Authorization": FOURSQUARE_API,
                "accept": "application/json"
            }
            response = requests.get(
                f"https://api.foursquare.com/v3/places/search?near={city}&categories=13000&limit=5",
                headers=headers
            ).json()
            
            for place in response.get('results', [])[:5]:
                text = f"üç¥ <b>{place.get('name')}</b>\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {place.get('rating', '?')}\nüìç –ê–¥—Ä–µ—Å: {place['location'].get('formatted_address', '–ù–µ—Ç –∞–¥—Ä–µ—Å–∞')}"
                bot.send_message(message.chat.id, text, parse_mode='HTML')
                
        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞: {str(e)}")

    
    @bot.message_handler(commands=['outfit'])
    def handle_outfit(message):
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á—Ç–æ –Ω–∞–¥–µ—Ç—å"""
        try:
            city = message.text.split(' ', 1)[1]
            coords = get_city_coords(city)
            if not coords:
                return bot.reply_to(message, "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω üßê")
            
            weather = get_weather_data(*coords)
            outfit = generate_outfit_recommendation(weather)
            
            response = (
                f"üå°Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {city}: {weather['temp']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {weather['feels_like']}¬∞C)\n"
                f"‚òÄÔ∏è UV –∏–Ω–¥–µ–∫—Å: {weather['uv']:.1f}\n\n"
                f"üëó <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ:</b>\n{outfit['clothes']}\n\n"
                f"üß¥ <b>–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–æ–ª–Ω—Ü–∞:</b>\n{outfit['spf']}"
            )
            
            bot.reply_to(message, response, parse_mode='HTML')
            
        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞: {str(e)}")
